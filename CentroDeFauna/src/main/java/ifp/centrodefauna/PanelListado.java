/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ifp.centrodefauna;

import java.text.SimpleDateFormat;
import javax.swing.ButtonModel;
import javax.swing.DefaultListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ajpyu
 */
public class PanelListado extends javax.swing.JPanel {

    /**
     * Creates new form PanelListado
     */
    public PanelListado() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupEstado = new javax.swing.ButtonGroup();
        buttonGroupAnimal = new javax.swing.ButtonGroup();
        Titulo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableLista = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButtonBucar = new javax.swing.JButton();
        jRadioAve = new javax.swing.JRadioButton();
        jRadioMamifero = new javax.swing.JRadioButton();
        jRadioReptil = new javax.swing.JRadioButton();
        jRadioTratamiento = new javax.swing.JRadioButton();
        jRadioLiberado = new javax.swing.JRadioButton();
        jRadioFallecido = new javax.swing.JRadioButton();
        jLabelEstado = new javax.swing.JLabel();
        Reinicio = new javax.swing.JButton();

        setBackground(new java.awt.Color(246, 251, 244));

        Titulo.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        Titulo.setForeground(new java.awt.Color(75, 134, 115));
        Titulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Titulo.setText("Listado");
        Titulo.setToolTipText("");
        Titulo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jTableLista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Clase Animal", "Nombre", "Especie", "Peso", "Gravedad", "Lesion", "Dato Extra", "Alta", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableLista);
        if (jTableLista.getColumnModel().getColumnCount() > 0) {
            jTableLista.getColumnModel().getColumn(0).setResizable(false);
            jTableLista.getColumnModel().getColumn(1).setResizable(false);
            jTableLista.getColumnModel().getColumn(2).setResizable(false);
            jTableLista.getColumnModel().getColumn(3).setResizable(false);
            jTableLista.getColumnModel().getColumn(4).setResizable(false);
            jTableLista.getColumnModel().getColumn(5).setResizable(false);
            jTableLista.getColumnModel().getColumn(6).setResizable(false);
            jTableLista.getColumnModel().getColumn(7).setResizable(false);
            jTableLista.getColumnModel().getColumn(8).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(75, 134, 115));
        jLabel1.setText("Clase Animal:");

        jButtonBucar.setBackground(new java.awt.Color(245, 223, 153));
        jButtonBucar.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jButtonBucar.setForeground(new java.awt.Color(75, 134, 115));
        jButtonBucar.setText("Buscar");
        jButtonBucar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonBucar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBucarActionPerformed(evt);
            }
        });

        buttonGroupAnimal.add(jRadioAve);
        jRadioAve.setText("Ave");
        jRadioAve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioAveActionPerformed(evt);
            }
        });

        buttonGroupAnimal.add(jRadioMamifero);
        jRadioMamifero.setText("Mam√≠fero");
        jRadioMamifero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioMamiferoActionPerformed(evt);
            }
        });

        buttonGroupAnimal.add(jRadioReptil);
        jRadioReptil.setText("Reptil");
        jRadioReptil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioReptilActionPerformed(evt);
            }
        });

        buttonGroupEstado.add(jRadioTratamiento);
        jRadioTratamiento.setText("Tratamiento");

        buttonGroupEstado.add(jRadioLiberado);
        jRadioLiberado.setText("Liberado");

        buttonGroupEstado.add(jRadioFallecido);
        jRadioFallecido.setText("Fallecido");

        jLabelEstado.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabelEstado.setForeground(new java.awt.Color(75, 134, 115));
        jLabelEstado.setText("Estado:");

        Reinicio.setBackground(new java.awt.Color(245, 223, 153));
        Reinicio.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        Reinicio.setForeground(new java.awt.Color(75, 134, 115));
        Reinicio.setText("Reiniciar");
        Reinicio.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Reinicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReinicioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 933, Short.MAX_VALUE)
                            .addComponent(Titulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jRadioAve)
                            .addComponent(jRadioMamifero)
                            .addComponent(jRadioReptil))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelEstado)
                            .addComponent(jRadioLiberado)
                            .addComponent(jRadioFallecido)
                            .addComponent(jRadioTratamiento))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 434, Short.MAX_VALUE)
                        .addComponent(jButtonBucar, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Reinicio, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Titulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabelEstado))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButtonBucar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Reinicio, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioAve)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioMamifero)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioReptil))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRadioTratamiento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioLiberado, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioFallecido)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonBucarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBucarActionPerformed
        String clase = "";
        String estado = "";
        if (jRadioAve.isSelected()) {
            clase = "Ave";
        } else if (jRadioMamifero.isSelected()) {
            clase = "Mam√≠fero";
        } else if (jRadioReptil.isSelected()) {
            clase = "Reptil";
        }

        if (jRadioTratamiento.isSelected()) {
            estado = "Tratamiento";
        } else if (jRadioLiberado.isSelected()) {
            estado = "Liberado";
        } else if (jRadioFallecido.isSelected()) {
            estado = "Fallecido";
        }

        DefaultTableModel modelo = (DefaultTableModel) jTableLista.getModel();
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        modelo.setRowCount(0);

//        if (!(buttonGroupAnimal.getSelection().isSelected() && buttonGroupEstado.getSelection().isSelected())) {
//            for (Animal a : CentroDeFauna.listadoAnimales) {
//                ActualizarLista(a, formato, modelo);
//            }
//        } else if (buttonGroupAnimal.getSelection().isSelected() && !buttonGroupEstado.getSelection().isSelected()) {
//            for (Animal a : CentroDeFauna.listadoAnimales) {
//                if (a.getTipo().equals(clase)) {
//                    ActualizarLista(a, formato, modelo);
//                }
//            }
//        } else if (!buttonGroupAnimal.getSelection().isSelected() && buttonGroupEstado.getSelection().isSelected()) {
//            for (Animal a : CentroDeFauna.listadoAnimales) {
//                if ((a.getLiberacion() == null && a.getMuerte() == null) && "Tratamiento".equals(estado)) {
//                    ActualizarLista(a, formato, modelo);
//                } else if ((a.getMuerte() == null) && "Liberado".equals(estado)) {
//                    ActualizarLista(a, formato, modelo);
//                } else if ((a.getLiberacion() == null) && "Fallecido".equals(estado)) {
//                    ActualizarLista(a, formato, modelo);
//                }
//            }
//        } else if (buttonGroupAnimal.getSelection().isSelected() && buttonGroupEstado.getSelection().isSelected()) {
//            for (Animal a : CentroDeFauna.listadoAnimales) {
//                if ((a.getLiberacion() == null && a.getMuerte() == null) && "Tratamiento".equals(estado) && a.getTipo().equals(clase)) {
//                    ActualizarLista(a, formato, modelo);
//                } else if ((a.getMuerte() == null) && "Liberado".equals(estado) && a.getTipo().equals(clase)) {
//                    ActualizarLista(a, formato, modelo);
//                } else if ((a.getLiberacion() == null) && "Fallecido".equals(estado) && a.getTipo().equals(clase)) {
//                    ActualizarLista(a, formato, modelo);
//                }
//            }
//        }
        if (clase.isEmpty() && estado.isEmpty()) {
            for (Animal a : CentroDeFauna.listadoAnimales) {
                ActualizarLista(a, formato, modelo);
            }
        } else if (!clase.isEmpty() && !estado.isEmpty()) {
            for (Animal a : CentroDeFauna.listadoAnimales) {
                if ((a.getLiberacion() == null && a.getMuerte() == null) && "Tratamiento".equals(estado) && a.getTipo().equals(clase)) {
                    ActualizarLista(a, formato, modelo);
                } else if ((a.getMuerte() != null) && "Liberado".equals(estado) && a.getTipo().equals(clase)) {
                    ActualizarLista(a, formato, modelo);
                } else if ((a.getLiberacion() != null) && "Fallecido".equals(estado) && a.getTipo().equals(clase)) {
                    ActualizarLista(a, formato, modelo);
                }
            }
        } else if (!clase.isEmpty()) {
            for (Animal a : CentroDeFauna.listadoAnimales) {
                if (a.getTipo().equals(clase)) {
                    ActualizarLista(a, formato, modelo);
                }
            }
        } else if (!estado.isEmpty()) {
            for (Animal a : CentroDeFauna.listadoAnimales) {
                if ((a.getLiberacion() == null && a.getMuerte() == null) && "Tratamiento".equals(estado)) {
                    ActualizarLista(a, formato, modelo);
                } else if ((a.getMuerte() != null) && "Liberado".equals(estado)) {
                    ActualizarLista(a, formato, modelo);
                } else if ((a.getLiberacion() != null) && "Fallecido".equals(estado)) {
                    ActualizarLista(a, formato, modelo);
                }
            }
        }
    }//GEN-LAST:event_jButtonBucarActionPerformed

    private void ReinicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReinicioActionPerformed
        initElementsInTable();
        buttonGroupAnimal.clearSelection();
        buttonGroupEstado.clearSelection();
    }//GEN-LAST:event_ReinicioActionPerformed

    private void jRadioAveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioAveActionPerformed
        if (jRadioAve.isSelected()) {
            buttonGroupAnimal.clearSelection();
        }
    }//GEN-LAST:event_jRadioAveActionPerformed

    private void jRadioMamiferoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioMamiferoActionPerformed
        if (jRadioMamifero.isSelected()) {
            buttonGroupAnimal.clearSelection();
        }
    }//GEN-LAST:event_jRadioMamiferoActionPerformed

    private void jRadioReptilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioReptilActionPerformed
        if (jRadioReptil.isSelected()) {
            buttonGroupAnimal.clearSelection();
        }
    }//GEN-LAST:event_jRadioReptilActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Reinicio;
    private javax.swing.JLabel Titulo;
    private javax.swing.ButtonGroup buttonGroupAnimal;
    private javax.swing.ButtonGroup buttonGroupEstado;
    private javax.swing.JButton jButtonBucar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelEstado;
    private javax.swing.JRadioButton jRadioAve;
    private javax.swing.JRadioButton jRadioFallecido;
    private javax.swing.JRadioButton jRadioLiberado;
    private javax.swing.JRadioButton jRadioMamifero;
    private javax.swing.JRadioButton jRadioReptil;
    private javax.swing.JRadioButton jRadioTratamiento;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableLista;
    // End of variables declaration//GEN-END:variables

    public void initElementsInTable() {
        DefaultTableModel modelo = (DefaultTableModel) jTableLista.getModel();
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        modelo.setRowCount(0);
        for (Animal a : CentroDeFauna.listadoAnimales) {
            ActualizarLista(a, formato, modelo);
        }
    }

    private void ActualizarLista(Animal a, SimpleDateFormat formato, DefaultTableModel modelo) {
        Object[] fila = new Object[9];
        fila[0] = a.getTipo();
        fila[1] = a.getNombre();
        fila[2] = a.getEspecie();
        fila[3] = a.getPeso();
        fila[4] = a.getGravedad();
        fila[5] = a.getTipoLesion();
        fila[6] = a.datoExtra();
        fila[7] = formato.format(a.getFechaEntrada());
        fila[8] = (a.getLiberacion() == null && a.getMuerte() == null) ? "Tratamiento" : a.getMuerte() == null ? "Liberado" : "Fallecido";
        modelo.addRow(fila);
    }
}
